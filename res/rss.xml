<rss version="2.0">
 <channel>
  <title>rockorager&apos;s devlog</title>
  <link>https://rockorager.dev/log/</link>
  <description>Shortform dev updates</description>
  <generator>Zine -- https://zine-ssg.io</generator>
  <language>en-us</language>
  <lastBuildDate>Sat, 10 May 2025 11:32:33 +0000</lastBuildDate>
  
    <item>
     <pubDate>Fri, 09 May 2025 20:34:59 +0000</pubDate>
     <link>https://rockorager.dev/log/knit-a-cli-for-interacting-with-tangled-sh/</link>
     <guid>https://rockorager.dev/log/knit-a-cli-for-interacting-with-tangled-sh/</guid>
     <title>knit: a cli for interacting with tangled.sh</title>
     <description>&lt;p&gt;&lt;a href=&quot;https://tangled.sh&quot; target=&quot;_blank&quot;&gt;tangled.sh&lt;/a&gt; is a &lt;em&gt;fantastic&lt;/em&gt; new git forge. It has all of it’s social features built around the AT Protocol (think Bluesky), and has what I find to be a really nice PR workflow. They manage to get a workflow that I prefer even over an email based workflow. To illustrate, imagine you have a PR or patch series and before it’s merged there will be at least one round of review + updates. With an email workflow, you’d resend the series with a &lt;code&gt;v2&lt;/code&gt; in the prefix (ie &lt;code&gt;[PATCH v2]&lt;/code&gt;). If there were multiple commits, the recipients get a fresh new copy of all commits with the changes - but &lt;em&gt;what&lt;/em&gt; changed between revisions? Typically you have to rely on the author to &lt;em&gt;tell&lt;/em&gt; you if it’s a large patch series, or maybe you can spot it. Here’s an example from a patch I sent it. I summarized the change just below the commit message…but that doesn’t mean much.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;From: Tim Culverhouse &amp;lt;tim@timculverhouse.com&amp;gt;
To: ~rjarry/aerc-devel@lists.sr.ht
Subject: [PATCH aerc v2] deps: update vaxis to v0.10.1

Vaxis v0.10.1 brings with it a few bug fixes, major sixel performance
improvements, and a new VT extension which enables Vaxis to receive
window resize updates in-band via escape sequences on supported
terminals (foot, ghostty, iTerm2, and kitty as of this patch).

- Improved performance all around for sixels (thanks, delthas)
- Fix key decoding for Home and End for the st terminal
- Implement mode 2048 for in-band resizes
- Add quirk for tmux 3.4 to turn on unicode width measurements

Signed-off-by: Tim Culverhouse &amp;lt;tim@timculverhouse.com&amp;gt;
---
v2: Fix reporting of resize events under mode 2048
 go.mod | 2 +-
 go.sum | 4 ++--
 2 files changed, 3 insertions(+), 3 deletions(-)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Github allows for a few different ways to handle updates to a PR. First, you can force push. This is like sending a new version of a patch series - all the commits are replaced, and it’s up to the reviewer to spot the changes (or the committer to note them). Alternatively, you could push a &lt;em&gt;new&lt;/em&gt; commit and then it’s very clear what changed. If the new commit is fixing a bug, and the project wants a clean commit history, you are in a bit of a bind. Using the “Rebase and Merge” button on Github &lt;em&gt;doesn’t&lt;/em&gt; autosquash…so even if the committer was nice and did this update as a &lt;code&gt;--fixup&lt;/code&gt;, it won’t squash. You’ll have to pull the commit down manually, autosquash, then push. Then that PR is left hanging there…it’s a mess.&lt;/p&gt;&lt;p&gt;Tangled solves this by having round based reviews, similar to the email workflow. The key difference is that you get an &lt;em&gt;interdiff&lt;/em&gt; button. What’s an interdiff? &lt;strong&gt;The diff between rounds&lt;/strong&gt;. How amazing is that? You can review &lt;em&gt;exactly&lt;/em&gt; what changed between each round.&lt;/p&gt;&lt;p&gt;Anyways, I am pretty happy with what they’ve built. You should try it out. I also built a small CLI for working with tangled.sh…it’s &lt;em&gt;very&lt;/em&gt; barebones but it let’s you create a pr &lt;em&gt;without needing a fork or a branch&lt;/em&gt;. You can &lt;code&gt;git clone https://tangled.sh/rockorager.dev/knit&lt;/code&gt; and then &lt;code&gt;knit pr create HEAD~1&lt;/code&gt; and your patch will appear on my repo as a PR. It’s like git-send-email but better.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://tangled.dev/@rockorager.dev/knit&quot; target=&quot;_blank&quot;&gt;knit&lt;/a&gt;&lt;/p&gt;</description>
    </item>
  
    <item>
     <pubDate>Tue, 06 May 2025 16:15:50 +0000</pubDate>
     <link>https://rockorager.dev/log/lsr-ls-but-with-io-uring/</link>
     <guid>https://rockorager.dev/log/lsr-ls-but-with-io-uring/</guid>
     <title>lsr: ls but with io_uring</title>
     <description>&lt;p&gt;As an excercise in syscall golf, I wrote an implementation of &lt;code&gt;ls(1)&lt;/code&gt; which uses my IO library, &lt;a href=&quot;https://github.com/rockorager/ourio&quot; target=&quot;_blank&quot;&gt;ourio&lt;/a&gt; to perform as much of the IO as possible. What I ended up with is something that is faster than any version or alternative to &lt;code&gt;ls&lt;/code&gt; I tested, and also performs an &lt;strong&gt;order of magnitude fewer syscalls&lt;/strong&gt;. I’m calling it &lt;a href=&quot;https://tangled.sh/@rockorager.dev/lsr&quot; target=&quot;_blank&quot;&gt;lsr&lt;/a&gt;. Let’s start with the benchmarks, then we’ll see how we got there.&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://rockorager.dev/log/lsr-ls-but-with-io-uring/screenshot.webp&quot;&gt;&lt;/p&gt;&lt;div id=&quot;benchmarks&quot; class=&quot;section &quot;&gt;&lt;h2&gt;&lt;a class=&quot;&quot; href=&quot;#benchmarks&quot;&gt;Benchmarks&lt;/a&gt;&lt;/h2&gt;&lt;/div&gt;&lt;div id=&quot;time&quot; class=&quot;section &quot;&gt;&lt;h3&gt;&lt;a class=&quot;&quot; href=&quot;#time&quot;&gt;Time&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Data gathered with &lt;code&gt;hyperfine&lt;/code&gt; on a directory of &lt;code&gt;n&lt;/code&gt; plain files.&lt;/p&gt;&lt;table&gt;&lt;tr&gt;&lt;th align=&apos;center&apos;&gt;Program&lt;/th&gt;&lt;th align=&apos;center&apos;&gt;n=10&lt;/th&gt;&lt;th align=&apos;center&apos;&gt;n=100&lt;/th&gt;&lt;th align=&apos;center&apos;&gt;n=1,000&lt;/th&gt;&lt;th align=&apos;center&apos;&gt;n=10,000&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&apos;center&apos;&gt;lsr -al&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;372.6 µs&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;634.3 µs&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;2.7 ms&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;22.1 ms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&apos;center&apos;&gt;ls -al&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;1.4 ms&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;1.7 ms&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;4.7 ms&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;38.0 ms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&apos;center&apos;&gt;eza -al&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;2.9 ms&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;3.3 ms&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;6.6 ms&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;40.2 ms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&apos;center&apos;&gt;lsd -al&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;2.1 ms&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;3.5 ms&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;17.0 ms&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;153.4 ms&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&apos;center&apos;&gt;uutils ls -al&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;2.9 ms&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;3.6 ms&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;11.3 ms&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;89.6 ms&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id=&quot;syscalls&quot; class=&quot;section &quot;&gt;&lt;h3&gt;&lt;a class=&quot;&quot; href=&quot;#syscalls&quot;&gt;Syscalls&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Data gathered with &lt;code&gt;strace -c&lt;/code&gt; on a directory of &lt;code&gt;n&lt;/code&gt; plain files. (Lower is better)&lt;/p&gt;&lt;table&gt;&lt;tr&gt;&lt;th align=&apos;center&apos;&gt;Program&lt;/th&gt;&lt;th align=&apos;center&apos;&gt;n=10&lt;/th&gt;&lt;th align=&apos;center&apos;&gt;n=100&lt;/th&gt;&lt;th align=&apos;center&apos;&gt;n=1,000&lt;/th&gt;&lt;th align=&apos;center&apos;&gt;n=10,000&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&apos;center&apos;&gt;lsr -al&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;20&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;28&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;105&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;848&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&apos;center&apos;&gt;ls -al&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;405&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;675&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;3,377&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;30,396&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&apos;center&apos;&gt;eza -al&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;319&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;411&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;1,320&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;10,364&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&apos;center&apos;&gt;lsd -al&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;508&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;1,408&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;10,423&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;100,512&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&apos;center&apos;&gt;uutils ls -al&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;445&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;986&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;6,397&lt;/td&gt;&lt;td align=&apos;center&apos;&gt;10,005&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;div id=&quot;how-we-got-there&quot; class=&quot;section &quot;&gt;&lt;h2&gt;&lt;a class=&quot;&quot; href=&quot;#how-we-got-there&quot;&gt;How we got there&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Let’s start with how &lt;code&gt;lsr&lt;/code&gt; works. To list directory contents, we basically have 3 stages to the program:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Parse args&lt;/li&gt;&lt;li&gt;Gather data&lt;/li&gt;&lt;li&gt;Print data&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;All of the IO involved happens in the second step. Wherever possible, &lt;code&gt;lsr&lt;/code&gt; utilizes io_uring to pull in the data it needs. To get to that point, it means that we open the target directory with io_uring, if we need local time, user data, or group data, we open (and read) those files with io_uring. We do all &lt;code&gt;stat&lt;/code&gt; calls via io_uring, and as needed we do the equivalent of an &lt;code&gt;lstat&lt;/code&gt; via io_uring. In practice, this means that the number of syscalls we have should be drastically smaller than equivalent programs because we are able to batch the &lt;code&gt;stat&lt;/code&gt; syscall. The results clearly show this…&lt;code&gt;lsr&lt;/code&gt; has at least an order of magnitude fewer syscalls than it’s closest equivalent, being &lt;code&gt;uutils ls&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;We also use the zig stdlib StackFallbackAllocator. This let’s &lt;code&gt;lsr&lt;/code&gt; allocate memory it needs up front, but fallback to a different allocator when it’s exhausted the fixed allocation. We allocate 1MB up front, which is more than enough for typical usage. This further reduces syscalls by reducing mmap usage.&lt;/p&gt;&lt;p&gt;As a result of working directly with io_uring, we also bypass several libc related pitfalls. Namely, we have no dynamic linking - &lt;code&gt;ls&lt;/code&gt; has some considerable overhead in loading libc and related libraries…but it also has the benefit of having locale support. &lt;code&gt;lsr&lt;/code&gt; does not boast such a feature. Despite being statically linked, &lt;code&gt;lsr&lt;/code&gt; is still smaller than GNU &lt;code&gt;ls&lt;/code&gt;: 138.7KB vs 79.3KB when built with ReleaseSmall.&lt;/p&gt;&lt;h2&gt;Anomolies and Thoughts&lt;/h2&gt;&lt;p&gt;I have no idea what &lt;code&gt;lsd&lt;/code&gt; is doing. I haven’t read the source code, but from viewing it’s &lt;code&gt;strace&lt;/code&gt;, it is calling &lt;code&gt;clock_gettime&lt;/code&gt; around 5 times &lt;strong&gt;per file&lt;/strong&gt;. Why? I don’t know. Maybe it’s doing internal timing of steps along the way?&lt;/p&gt;&lt;p&gt;Sorting ends up being a massive part of the workload. I suspect this is where &lt;code&gt;uutils ls&lt;/code&gt; is getting slowed down, since it is doing pretty good on a syscall basis. &lt;code&gt;lsr&lt;/code&gt; spends about 30% of it’s runtime sorting, the rest is the IO loop.&lt;/p&gt;&lt;p&gt;This ended up being a pretty fun project to write, and didn’t take too much time either. I am shocked at how much io_uring can be used to reduce syscalls…&lt;code&gt;ls&lt;/code&gt; is a pretty basic example but you can only imagine how much of an effect this would have on something like a server.&lt;/p&gt;&lt;p&gt;Also - I’m using &lt;a href=&quot;https://tangled.sh&quot; target=&quot;_blank&quot;&gt;tangled.sh&lt;/a&gt; for this project. They have a really cool idea, and I want to see how the PR workflow is so…if you have any bugs or changes, please visit the &lt;a href=&quot;https://tangled.sh/@rockorager.dev/lsr&quot; target=&quot;_blank&quot;&gt;repo&lt;/a&gt;. All you need is an atproto account + app password. I suspect more icons will be needed, feel free to make an issue for icon requests!&lt;/p&gt;&lt;/div&gt;</description>
    </item>
  
    <item>
     <pubDate>Thu, 01 May 2025 21:41:52 +0000</pubDate>
     <link>https://rockorager.dev/log/more-syscall-golf/</link>
     <guid>https://rockorager.dev/log/more-syscall-golf/</guid>
     <title>More syscall golf</title>
     <description>&lt;p&gt;I realized that in &lt;a href=&quot;https://rockorager.dev/log/asynchronous-dns-resolving-with-io-uring/&quot; target=&quot;_blank&quot;&gt;my last post&lt;/a&gt; the zig std library is checking for both A and AAAA records (IP4 and IP6). I modified my example code to query for both records and we end up with only 1 fewer syscall using ourio than stdlib. To show off the scalability of asynchronous resolving, I also tried resolving three domains at the same time:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;keyword_function&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable function&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;constant variable_builtin variable_parameter variable type&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable&quot;&gt;ourio&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;Ring&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;constant variable_builtin variable_parameter variable type&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;ourio&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;type_builtin&quot;&gt;anyerror&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;type_builtin&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.?&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;keyword_conditional&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword_exception&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;userptr&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;module constant variable_builtin type variable&quot;&gt;resolver&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable&quot;&gt;stda&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;dns&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;Resolver&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;function_builtin keyword_import&quot;&gt;@ptrCast&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;function_builtin&quot;&gt;@alignCast&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;keyword_exception&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;resolver&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;type constant variable_builtin function_call variable_member variable&quot;&gt;resolveQuery&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;timculverhouse.com&amp;quot;&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;cb&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;keyword_exception&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;resolver&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;type constant variable_builtin function_call variable_member variable&quot;&gt;resolveQuery&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;timculverhouse.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable&quot;&gt;AAAA&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;cb&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;keyword_exception&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;resolver&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;type constant variable_builtin function_call variable_member variable&quot;&gt;resolveQuery&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;ziglang.org&amp;quot;&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;cb&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;keyword_exception&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;resolver&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;type constant variable_builtin function_call variable_member variable&quot;&gt;resolveQuery&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;ziglang.org&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable&quot;&gt;AAAA&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;cb&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;keyword_exception&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;resolver&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;type constant variable_builtin function_call variable_member variable&quot;&gt;resolveQuery&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;github.com&amp;quot;&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;cb&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;keyword_exception&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;resolver&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;type constant variable_builtin function_call variable_member variable&quot;&gt;resolveQuery&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;github.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable&quot;&gt;AAAA&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;cb&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;punctuation_bracket&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;

        &lt;span class=&quot;keyword_conditional&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;punctuation_bracket&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;punctuation_bracket&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When doing this, we end up with 40-42 syscalls for ourio and 99-102 syscalls for the stdlib. Let’s take out 12 calls for loading /etc/hosts and Ourio is doing about 50 fewer syscalls for this workload (&lt;strong&gt;half&lt;/strong&gt; as many)!&lt;/p&gt;</description>
    </item>
  
    <item>
     <pubDate>Thu, 01 May 2025 16:19:26 +0000</pubDate>
     <link>https://rockorager.dev/log/asynchronous-dns-resolving-with-io-uring/</link>
     <guid>https://rockorager.dev/log/asynchronous-dns-resolving-with-io-uring/</guid>
     <title>Asynchronous DNS resolving with io_uring</title>
     <description>&lt;p&gt;Yesterday I added an asynchronous DNS resolver to my &lt;a href=&quot;https://github.com/rockorager/ourio&quot; target=&quot;_blank&quot;&gt;io&lt;/a&gt; library. The std library way to resolve an address is&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;keyword_modifier&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;keyword_function&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;type_builtin&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;gpa&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;type constant variable_builtin function_call variable_member variable&quot;&gt;DebugAllocator&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;addrs&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword_exception&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;type constant variable_builtin function_call variable_member variable&quot;&gt;getAddressList&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable&quot;&gt;gpa&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;type constant variable_builtin function_call variable_member variable&quot;&gt;allocator&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;rockorager.dev&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;443&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;addrs&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;type constant variable_builtin function_call variable_member variable&quot;&gt;deinit&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;punctuation_bracket&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With ourio, this becomes a bit more verbose since we have asynchronous callbacks:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;zig&quot;&gt;&lt;span class=&quot;keyword_modifier&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;keyword_function&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;type_builtin&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;gpa&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;type constant variable_builtin function_call variable_member variable&quot;&gt;DebugAllocator&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;ourio&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;Ring&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword_exception&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin function_call variable type&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable&quot;&gt;gpa&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;type constant variable_builtin function_call variable_member variable&quot;&gt;allocator&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;type constant variable_builtin function_call variable_member variable&quot;&gt;deinit&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;resolver&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;stda&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;dns&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;Resolver&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;constant_builtin&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;keyword_exception&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;resolver&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;type constant variable_builtin function_call variable_member variable&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable&quot;&gt;gpa&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;type constant variable_builtin function_call variable_member variable&quot;&gt;allocator&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;cb&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;resolver&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;type constant variable_builtin function_call variable_member variable&quot;&gt;deinit&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;keyword_exception&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;type constant variable_builtin function_call variable_member variable&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable&quot;&gt;until_done&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;punctuation_bracket&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;keyword_function&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable function&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;constant variable_builtin variable_parameter variable type&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable&quot;&gt;ourio&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;Ring&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;constant variable_builtin variable_parameter variable type&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;ourio&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;type_builtin&quot;&gt;anyerror&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;type_builtin&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;.?&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;keyword_conditional&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword_exception&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;userptr&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;module constant variable_builtin type variable&quot;&gt;resolver&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable&quot;&gt;stda&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;dns&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;Resolver&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;function_builtin keyword_import&quot;&gt;@ptrCast&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;function_builtin&quot;&gt;@alignCast&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;keyword_exception&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;resolver&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;type constant variable_builtin function_call variable_member variable&quot;&gt;resolveQuery&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
	        &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;rockorager.dev&amp;quot;&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;constant variable_builtin type variable_member variable&quot;&gt;cb&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;constant variable_builtin type variable&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
	    &lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;punctuation_bracket&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;keyword_conditional&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;punctuation_delimiter&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;punctuation_bracket&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;punctuation_bracket&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, it’s unlikely that a shortlived program like this is going to benefit much, if at all, from creating an io_uring event loop and operating asynchronously. But io_uring also gives us a chance to batch syscalls and in the ourio dns case, every syscall is done through io_uring (open, read, close, recv, write, etc) and a few have the opportunity for batching. For example, at the same time we write the DNS packet we also recv the connection. So what we &lt;em&gt;can&lt;/em&gt; do to benchmark this vs the standard library is to check the number of syscalls.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;constant operator function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;constant function&quot;&gt; &lt;/span&gt;&lt;span class=&quot;constant property function&quot;&gt;strace&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;./zig-out/bin/scratch&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;--sync&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;gt;| wc -l
&lt;span class=&quot;constant function&quot;&gt;38&lt;/span&gt;
&lt;span class=&quot;constant operator function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;constant function&quot;&gt; &lt;/span&gt;&lt;span class=&quot;constant property function&quot;&gt;strace&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;./zig-out/bin/scratch&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;--async&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;gt;| wc -l
&lt;span class=&quot;constant function&quot;&gt;30&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s over a 25% reduction in syscalls for a mostly synchronous program! Now, it’s not quite fair…if we look at what std is doing, it is also checking the &lt;code&gt;/etc/hosts&lt;/code&gt; file, which ourio does not do. That’s 4 syscalls there (openat, read, read, close). Taking those out we have &lt;strong&gt;4 fewer syscalls than stdlib&lt;/strong&gt;. Still a pretty decent reduction for this simple example.&lt;/p&gt;&lt;p&gt;For posterity, the raw output of each strace:&lt;/p&gt;&lt;div id=&quot;stdlib&quot; class=&quot;section &quot;&gt;&lt;h2&gt;&lt;a class=&quot;&quot; href=&quot;#stdlib&quot;&gt;Stdlib&lt;/a&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;execve(&amp;quot;./zig-out/bin/scratch&amp;quot;, [&amp;quot;./zig-out/bin/scratch&amp;quot;, &amp;quot;--sync&amp;quot;], 0x7ffd51074538 /* 46 vars */) = 0
arch_prctl(ARCH_SET_FS, 0x105d010)      = 0
prlimit64(0, RLIMIT_STACK, NULL, {rlim_cur=16384*1024, rlim_max=RLIM64_INFINITY}) = 0
rt_sigaction(SIGPIPE, {sa_handler=0x1011310, sa_mask=[], sa_flags=SA_RESTORER, sa_restorer=0x102a5e0}, NULL, 8) = 0
mmap(NULL, 258048, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7e98827de000
munmap(0x7e98827de000, 8192)            = 0
munmap(0x7e9882800000, 118784)          = 0
openat(AT_FDCWD, &amp;quot;/etc/hosts&amp;quot;, O_RDONLY|O_NOCTTY|O_CLOEXEC) = 3
read(3, &amp;quot;# Static table lookup for hostna&amp;quot;..., 4096) = 65
read(3, &amp;quot;&amp;quot;, 4096)                       = 0
close(3)                                = 0
openat(AT_FDCWD, &amp;quot;/etc/resolv.conf&amp;quot;, O_RDONLY|O_NOCTTY|O_CLOEXEC) = 3
read(3, &amp;quot;# This is /run/systemd/resolve/s&amp;quot;..., 4096) = 920
mmap(0x7e9882800000, 258048, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7e98827a1000
munmap(0x7e98827a1000, 126976)          = 0
read(3, &amp;quot;&amp;quot;, 4096)                       = 0
close(3)                                = 0
clock_gettime(CLOCK_REALTIME, {tv_sec=1746120290, tv_nsec=235863327}) = 0
clock_gettime(CLOCK_REALTIME, {tv_sec=1746120290, tv_nsec=235903560}) = 0
socket(AF_INET, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, IPPROTO_IP) = 3
bind(3, {sa_family=AF_INET, sin_port=htons(0), sin_addr=inet_addr(&amp;quot;0.0.0.0&amp;quot;)}, 16) = 0
clock_gettime(CLOCK_REALTIME, {tv_sec=1746120290, tv_nsec=236046887}) = 0
sendto(3, &amp;quot;\v-\1\0\0\1\0\0\0\0\0\0\nrockorager\3dev\0\0\1\0\1&amp;quot;, 32, MSG_NOSIGNAL, {sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr(&amp;quot;127.0.0.53&amp;quot;)}, 16) = 32
sendto(3, &amp;quot;\250W\1\0\0\1\0\0\0\0\0\0\nrockorager\3dev\0\0\34\0\1&amp;quot;, 32, MSG_NOSIGNAL, {sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr(&amp;quot;127.0.0.53&amp;quot;)}, 16) = 32
poll([{fd=3, events=POLLIN}], 1, 2500)  = 1 ([{fd=3, revents=POLLIN}])
recvfrom(3, &amp;quot;\v-\201\200\0\1\0\1\0\0\0\0\nrockorager\3dev\0\0\1\0\1&amp;quot;..., 512, 0, {sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr(&amp;quot;127.0.0.53&amp;quot;)}, [16]) = 48
recvfrom(3, &amp;quot;\250W\201\200\0\1\0\0\0\1\0\0\nrockorager\3dev\0\0\34\0\1&amp;quot;..., 512, 0, {sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr(&amp;quot;127.0.0.53&amp;quot;)}, [16]) = 105
close(3)                                = 0
mmap(0x7e98827e0000, 258048, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7e9882781000
munmap(0x7e9882781000, 126976)          = 0
munmap(0x7e98827c0000, 131072)          = 0
munmap(0x7e98827a0000, 131072)          = 0
munmap(0x7e98827e0000, 131072)          = 0
exit_group(0)                           = ?
+++ exited with 0 +++
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div id=&quot;ourio&quot; class=&quot;section &quot;&gt;&lt;h2&gt;&lt;a class=&quot;&quot; href=&quot;#ourio&quot;&gt;Ourio&lt;/a&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;execve(&amp;quot;./zig-out/bin/scratch&amp;quot;, [&amp;quot;./zig-out/bin/scratch&amp;quot;, &amp;quot;--async&amp;quot;], 0x7ffc8137db58 /* 46 vars */) = 0
arch_prctl(ARCH_SET_FS, 0x105d010)      = 0
prlimit64(0, RLIMIT_STACK, NULL, {rlim_cur=16384*1024, rlim_max=RLIM64_INFINITY}) = 0
rt_sigaction(SIGPIPE, {sa_handler=0x1011310, sa_mask=[], sa_flags=SA_RESTORER, sa_restorer=0x102a5e0}, NULL, 8) = 0
io_uring_setup(16, {flags=IORING_SETUP_CLAMP|IORING_SETUP_SUBMIT_ALL|IORING_SETUP_COOP_TASKRUN|IORING_SETUP_SINGLE_ISSUER|IORING_SETUP_DEFER_TASKRUN, sq_thread_cpu=0, sq_thread_idle=1000, sq_entries=16, cq_entries=32, features=IORING_FEAT_SINGLE_MMAP|IORING_FEAT_NODROP|IORING_FEAT_SUBMIT_STABLE|IORING_FEAT_RW_CUR_POS|IORING_FEAT_CUR_PERSONALITY|IORING_FEAT_FAST_POLL|IORING_FEAT_POLL_32BITS|IORING_FEAT_SQPOLL_NONFIXED|IORING_FEAT_EXT_ARG|IORING_FEAT_NATIVE_WORKERS|IORING_FEAT_RSRC_TAGS|IORING_FEAT_CQE_SKIP|IORING_FEAT_LINKED_FILE|IORING_FEAT_REG_REG_RING|IORING_FEAT_RECVSEND_BUNDLE|IORING_FEAT_MIN_TIMEOUT|IORING_FEAT_RW_ATTR, sq_off={head=0, tail=4, ring_mask=16, ring_entries=24, flags=36, dropped=32, array=576, user_addr=0}, cq_off={head=8, tail=12, ring_mask=20, ring_entries=28, overflow=44, cqes=64, flags=40, user_addr=0}}) = 3
mmap(NULL, 640, PROT_READ|PROT_WRITE, MAP_SHARED|MAP_POPULATE, 3, 0) = 0x7bc52c7a2000
mmap(NULL, 1024, PROT_READ|PROT_WRITE, MAP_SHARED|MAP_POPULATE, 3, 0x10000000) = 0x7bc52c7a1000
mmap(NULL, 258048, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7bc52c762000
munmap(0x7bc52c762000, 122880)          = 0
munmap(0x7bc52c7a0000, 4096)            = 0
io_uring_enter(3, 1, 1, IORING_ENTER_GETEVENTS, NULL, 8) = 1
mmap(0x7bc52c7a0000, 258048, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7bc52c741000
munmap(0x7bc52c741000, 126976)          = 0
io_uring_enter(3, 1, 1, IORING_ENTER_GETEVENTS, NULL, 8) = 1
clock_gettime(CLOCK_REALTIME, {tv_sec=1746120306, tv_nsec=417392127}) = 0
mmap(0x7bc52c780000, 258048, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7bc52c721000
munmap(0x7bc52c721000, 126976)          = 0
io_uring_enter(3, 2, 1, IORING_ENTER_GETEVENTS, NULL, 8) = 2
io_uring_enter(3, 1, 1, IORING_ENTER_GETEVENTS, NULL, 8) = 1
munmap(0x7bc52c740000, 131072)          = 0
io_uring_enter(3, 4, 1, IORING_ENTER_GETEVENTS, NULL, 8) = 4
io_uring_enter(3, 0, 1, IORING_ENTER_GETEVENTS, NULL, 8) = 0
munmap(0x7bc52c760000, 131072)          = 0
io_uring_enter(3, 1, 1, IORING_ENTER_GETEVENTS, NULL, 8) = 1
munmap(0x7bc52c7a1000, 1024)            = 0
munmap(0x7bc52c7a2000, 640)             = 0
close(3)                                = 0
munmap(0x7bc52c780000, 131072)          = 0
exit_group(0)                           = ?
+++ exited with 0 +++
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
  
 </channel>
</rss>
